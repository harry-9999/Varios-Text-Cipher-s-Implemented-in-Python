#!/usr/bin/env python3
import os
import sys
import struct
import random
import string
from string import ascii_uppercase as l
from itertools import cycle, islice
from ctypes import c_ulong
from functools import reduce



# Repeats keystream to desired length
def rep(lst, m):
    return list(islice(cycle(lst), m))

# Generates Vigenere table
def generate_table():
  l = list(range(0, 256))
  table = [l[i:]+l[:i] for i in range(len(l))]
  return table

def ulong(i): return c_ulong(i).value

def sdbm_hash(s):
  return reduce(lambda h,c: ulong(ord(c) + (h << 6) + (h << 16) - h), s, 0)


def generate_lck(password, n):
  a  = 1103515245 
  c = 12345 
  m = 256

  seed = sdbm_hash(password) # seed generated by hashing pwd
  keystream_blist = []

  x_value = seed
  i = 0
  while(i<n):
    x_value = (a * x_value + c) % m
    keystream_blist.append( x_value )
    i = i+1

  return keystream_blist

def blocks(lst, n):
    n = max(1, n)
    return list(lst[i:i+n] for i in range(0, len(lst), n))

# Swap two elements in a list 
def swap(list, pos1, pos2): 
    list[pos1], list[pos2] = list[pos2], list[pos1] 
    return list


def sbencrypt(password, c_f_blist, output_file):
  keystream = generate_lck(password, (16 * (len(c_f1_blist)+1)) )
  # Creating 16 byte blocks
  keystream= blocks(keystream,16 )
  IV = keystream[0]
  e = 1
  blocksize = 16
  ##("IV: ", IV)
  f = open(output_file, "wb")
  ciphertext_block_blist = []
  temp_block_blist = []
  for block in c_f1_blist:
    if (len(ciphertext_block_blist) == 0 ): # Ciphertext block is empty, thus first block
      ciphertext_block_blist = IV.copy()    
    for i in range(blocksize):
      c_byte = ciphertext_block_blist[i]
     
      if (isinstance(block[i],int)):
        file_byte = block[i]
      else:
        file_byte = int.from_bytes(block[i], "big")
      
      v = file_byte ^ c_byte     
      temp_block_blist.append(v)  
    
    
    ciphertext_block_blist = [] # Setting ciphertext blist to empty 
      
    keystream_blist = keystream[e]
    e = e+1
    
    ##("BLOCK MANIUPLATION")
    i = 0
    for i in range(blocksize): # Iterating through keystream and manipulating each byte
      first = int(keystream_blist[i]) & int(hex(0xf), 16)    
      second = ( int(keystream_blist[i]) >> 4) & int(hex(0xf), 16)
      temp_block_blist = swap(temp_block_blist,first,second)  
    i = 0
    for i in range(blocksize): # XOR temp block with keystream block      
      keystream_byte = int(keystream_blist[i]) 
      temp_byte = int(temp_block_blist[i])  
      v = temp_byte ^ keystream_byte   
      f.write(v.to_bytes(1, 'big')) # Writing ciphertext byte
      ciphertext_block_blist.append(v) # Storing for next iteration    
    temp_block_blist = [] # Emptying temp block list
    
password = str(sys.argv[1])

f1_blist = []
file = open(str(sys.argv[2]), 'rb')
while True:
  byte = file.read(1)
  if not byte:
    break
  f1_blist.append(bytes(byte))

# Creating 16 byte blocks
c_f1_blist = blocks(f1_blist,16 )

# Applying padding to last block
padding = 16 - int( len(c_f1_blist[-1]) )
for i in range(16 - len(c_f1_blist[-1])):
  (c_f1_blist[-1]).append(padding)

# Adding whole new block in the case that padding is equal to 0
if (padding == 0):
  t = 0
  lst = []
  for t in range(16):
    lst.append(16)
    t = t+1
  c_f1_blist.append(lst)
sbencrypt(password,c_f1_blist,str(sys.argv[3]))
file.close()
print("program complete!")

